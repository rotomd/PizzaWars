{"ts":1357418975426,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"//var define = require('requirejs').define;\r\nvar fs = require('fs'),\r\n    path = require('path'),\r\n    mkdirp = require('mkdirp'),\r\n    jade = require('jade');\r\n\r\n//define(['fs', 'path', 'mkdirp', 'jade'], function(fs, path, mkdirp, jade) {\r\n\r\nvar basename = path.basename;\r\nvar dirname = path.dirname;\r\nvar resolve = path.resolve;\r\nvar join = path.join;\r\n\r\nexports.jadeCompile = function(path, out, options) {\r\n    // filename\r\n    if (out)\r\n      options.filename = out;\r\n\r\n    if (!(path instanceof Array))\r\n      path = [path];\r\n\r\n    // left-over args are file paths\r\n    var files = path;\r\n\r\n    // compile files\r\n    for (var i = 0; i < files.length; i++)\r\n      renderFile(files[i]);\r\n\r\n    /**\r\n     * Process the given path, compiling the jade files found.\r\n     * Always walk the subdirectories.\r\n     */\r\n    function renderFile(path) {\r\n      var re = /\\.jade$/;\r\n      fs.lstat(path, function(err, stat) {\r\n        if (err) throw err;\r\n        // Found jade file\r\n        if (stat.isFile() && re.test(path)) {\r\n          fs.readFile(path, 'utf8', function(err, str) {\r\n            if (err) throw err;\r\n            options.filename = path;\r\n            var fn = jade.compile(str, options).toString().substring(18);\r\n            path = path.replace(re, '.js');\r\n            if (out) path = join(out, basename(path));\r\n            var dir = resolve(dirname(path));\r\n            mkdirp(dir, 0755, function(err){\r\n              if (err) throw err;\r\n              fs.writeFile(path, 'define([\"/scripts/lib/jade/runtime.js\"], function() { return function' + fn + ' });', function(err){\r\n                if (err) throw err;\r\n                //console.log('  33[90mrendered 33[36m%s33[0m', path);\r\n              });\r\n            });\r\n          });\r\n        // Found directory\r\n        } else if (stat.isDirectory()) {\r\n          fs.readdir(path, function(err, files) {\r\n            if (err) throw err;\r\n            var dirfiles = files.map(function(filename) {\r\n              return path + '/' + filename;\r\n            });\r\n            for (var i = 0; i < dirfiles.length; i++)\r\n              renderFile(dirfiles[i]);\r\n          });\r\n        }\r\n      });\r\n    }\r\n};\r\n//});"]],"start1":0,"start2":0,"length1":0,"length2":2177}]],"length":2177}
{"contributors":[],"silentsave":false,"ts":1357418932575,"patch":[[{"diffs":[[0,"unction("],[1,"jade"],[0,") { retu"]],"start1":1534,"start2":1534,"length1":16,"length2":20}]],"length":2181,"saved":false}
{"contributors":[],"silentsave":false,"ts":1357420048321,"patch":[[{"diffs":[[0,"lib/jade"],[-1,"/"],[1,"-"],[0,"runtime."]],"start1":1510,"start2":1510,"length1":17,"length2":17},{"diffs":[[0,"unction("],[1,"jade"],[0,") { retu"]],"start1":1534,"start2":1534,"length1":16,"length2":20}]],"length":2181,"saved":false}
