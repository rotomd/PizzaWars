{
  "name": "asset-rack",
  "version": "1.1.7",
  "description": "Asset management framework for nodejs",
  "author": {
    "name": "Brad Carleton",
    "email": "brad@techpines.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/techpines/asset-rack"
  },
  "dependencies": {
    "coffee-script": "1.4.0",
    "browserify": "1.16.6",
    "snockets": "1.3.8",
    "uglify-js": "2.2.2",
    "async": "0.1.22",
    "knox": "0.4.5",
    "less": "1.3.1",
    "jade": "0.27.7",
    "mime": "1.2.7"
  },
  "main": "switch.js",
  "engines": {
    "node": ">= 0.5.0"
  },
  "readme": "\n![asset-rack!](http://www.techpines.com/static/logo/asset-rack.png)\n\nA node-style asset management framework. Designed for Single Page Apps.\n\nInspired by Trevor Burnham's [connect-assets](https://github.com/TrevorBurnham/connect-assets), and the Rails [Asset Pipeline](http://guides.rubyonrails.org/asset_pipeline.html)\n\n* __Orignal Author__: Brad Carleton\n* __Company__: Tech Pines\n* __Blog Intro__: [Introducing AssetRack](http://www.techpines.com/blog/asset-rack-dynamic-asset-management-nodejs)\n\n## Features\n\n1. Dynamic asset creation for js, css, html templates.\n2. Support for js/coffescript, browserify (node-style requires).\n3. Support for snockets (Rails/Sprockets-style comments to indicate dependencies).\n4. Support for less.\n5. Support for jade templates.\n6. Support for angularjs templates.\n7. Multi-process, multi-server out of the box.  Share nothing.\n8. Filenames hashed for \"forever\" HTML caching and easy CDN updates.\n9. No need to ever compile static files to disk, all-in memory.\n10. Ability to push compiled files to Amazon S3 for use with Cloudfront.\n11. Can be plugged into express as connect middleware.\n12. Easily extensible.\n\n## Install\n\n```bash\nnpm install asset-rack\n```\n\n## Concepts\n\nThere are two very simple conepts to understand with asset-rack.\n\n### Asset\nAn asset after it is `complete`, consists of three very important things.\n* `url`: A human readable url.\n* `contents`: Contents for the asset, like the actual javascript or image or whatever.\n* `md5`: An md5 hash of the contents\n\nThese three pieces are absolutely critical.  The md5 hash is *super* important! This allows us to append our human readable url with the md5 hash for versioning which allows basically every static asset to be cached forever by proxies, browsers, cdn's.  This makes everything fast, fast, fast.\n\n### AssetRack\nAn asset rack is a collection of assets.  But it allows us to do things with assets that we always want to do very easily.  Like serve them from a memory cache using express and connect middleware, or push all individual assets to an Amazon S3 bucket, or write them to disk or whatever other group action we might want to perform on our assets.\n\n## Tutorial\nHere is a simple walk throught that demonstrates some of the\nmajor features of asset rack.\n\n### Create your Assets\nFirst create your assets.  Here we are creating our stylesheets,\njavascript code, and javascript templates from less, coffeescript and jade.\n```javascript\nvar rack = require('asset-rack');\n\nvar assets = new rack.AssetRack([\n    new rack.LessAsset({\n        url: '/style.css',\n        filename: __dirname + '/path/to/file.less'\n    }),\n    new rack.BrowserifyAsset({\n        url: '/app.js',\n        filename: __dirname + '/path/to/app.coffee'\n    }),\n    new rack.JadeAsset({\n        url: '/templates.js',\n        dirname: __dirname + '/templates'\n    })\n]);\n\nassets.on('complete', function() {\n    console.log('hey all my assets were created!');\n});\n```\n\n### Hook into Express\nOnce your assets have been created you can hook them\ninto express with ease.\n```javascript\nassets.on('complete', function() {\n    var app = express.createServer();\n    app.configure(function() {\n        app.use(assets);  // that's all you need to do\n    });\n    app.listen(8000);\n});\n```\n\nAll of those assets are now stored in an in-memroy cache, so it is super fast.\n\n### Markup Functions\n\nIn your jade templates you can include the tags by referencing their url.  For your convenience the assets object will be added to response locals, so that you can do the following in say a jade template:\n\n```\n!= assets.tag('/style.css')\n!= assets.tag('/app.js')\n!= assets.tag('/templates.js')\n```\nWhich results in the following html:\n\n```html\n<link href=\"/style-{md5-sum}.css\" rel=\"stylesheet\"></link>\n<script src=\"/templates-{md5-sum}.js\"></script>\n<script src=\"/app-{md5-sum}.js\"></script>\n```\n\nVery cool, and this will work for multi-process and multi-server.\n\nNotice the md5 sum that is now on the url.  This means you can HTML cache it forever.  Which is exactly what we do if you have the hash option set.  Also, updating your CDN is now a breeze.\n\n### Push Compiled Assets to S3\nNow that all your assets are done and hooked into express you can just\nserve them from your app, but we can do better!  Let's push them to Amazon\nAWS so they can be served by S3 or Cloudfront.\n\n\n```javascript\nassets.on('complete', function() {\n    assets.pushS3({\n        key: '<your aws key>',\n        secret: '<your aws secret>',\n        bucket: '<your aws bucket>'\n    });\n    assets.on('s3-upload-complete', function() {\n        console.log('our assets are now on amazon s3!');\n    });\n});\n```\n\n# API Reference\n\n## AssetRack\n\nThis is your initial collection of assets.\n\n```javascript\nvar assets = new AssetRack([\n    new rack.LessAsset({\n        url: '/style.css',\n        filename: __dirname + '/path/to/file.less'\n    }),\n    new rack.BrowserifyAsset({\n        url: '/app.js',\n        filename: __dirname + '/path/to/app.coffee'\n    }),\n    new rack.JadeAsset({\n        url: '/templates.js',\n        dirname: __dirname + '/templates'\n    })\n]);\n```\n\nTo use with express:\n\n```javascript\napp.use(assets);\n```\n\n### Methods\n* `tag(url)`: Given a url, returns the tag that should be used in HTML.\n* `pushS3({key:key, secret:secret, bucket:bucket})`: Pushes all asset contents to their respective\nurls in an Amazon S3 bucket.\n\n### Events\n\n* `complete`: Emitted after all assets have been created.\n* `s3-upload-complete`: Emitted after assets have been loaded to s3.\n* `error`: Emitted for any errors.\n\n## BrowserifyAsset (js/coffeescript)\n\nBrowserify is an awesome node project that converts node-style requires\nto requirejs for the frontend.  For more details, check it out,\n[here](https://github.com/substack/node-browserify).\n\n```javascript\nnew BrowserifyAsset({\n    url: '/app.js',\n    filename: __dirname + '/client/app.js',\n    compress: true\n});\n```\n\n### Options\n\n* `url`: The url that should retrieve this resource.\n* `filename`: A filename or list of filenames to be executed by the browser.\n* `require`: A filename or list of filenames to require, should not be necessary\nas the `filename` argument should pull in any requires you need.\n* `debug` (defaults to false): enables the browserify debug option.\n* `compress` (defaults to false): whether to run the javascript through a minifier.\n* `extensionHandlers` (defaults to []): an array of custom extensions and associated handler function. eg: `[{ ext: 'handlebars', handler: handlebarsCompilerFunction }]`\n* `hash` (defaults to true): Set to false if you don't want the md5 sum added to your urls.\n\n## Snockets (js/coffeescript)\n\nSnockets is a JavaScript/CoffeeScript concatenation tool for Node.js inspired by Sprockets. Used by connect-assets to create a Rails 3.1-style asset pipeline.  For more details, check it out,\n[here](https://github.com/TrevorBurnham/snockets).\n\n```javascript\nnew SnocketsAsset({\n    url: '/app.js',\n    filename: __dirname + '/client/app.js',\n    compress: true\n});\n```\n\n### Options\n\n* `url`: The url that should retrieve this resource.\n* `filename`: A filename or list of filenames to be executed by the browser.\n* `compress` (defaults to false): whether to run the javascript through a minifier.\n* `extensionHandlers` (defaults to []): an array of custom extensions and associated handler function. eg: `[{ ext: 'handlebars', handler: handlebarsCompilerFunction }]`\n* `debug` (defaults to false): output scripts via eval with trailing //@ sourceURL\n* `hash` (defaults to true): Set to false if you don't want the md5 sum added to your urls.\n\n## JadeAsset\nThis is an awesome asset.  Ever wanted the simplicity of jade templates\non the browser with lightning fast performance.  Here you go.\n\n```javascript\nnew JadeAsset({\n    url: '/templates.js',\n    dirname: __dirname + '/templates'\n});\n```\n\nSo if your template directory looked like this:\n\n```\nindex.jade\ncontact.jade\nuser/\n    profile.jade\n    info.jade\n```\n\nThen in the browser, you would first need to include the [jade runtime](https://github.com/visionmedia/jade/blob/master/runtime.js) script:\n\n```\nscript(src=\"/static/js/jade-runtime.js\", type=\"text/javascript\")\n```\n\nthen you could reference your templates like so:\n\n```javascript\n$('body').append(Templates['index']());\n$('body').append(Templates['user/profile']({username: 'brad', status: 'fun'}));\n$('body').append(Templates['user/info']());\n```\n### Options\n\n* `url`: The url that should retrieve this resource.\n* `dirname`: Directory where template files are located, will grab them recursively.\n* `separator` (defaults to '/'): The character that separates directories, i like to change it to an underscore, `_`.  So that you get more javascript friendly template names like `Templates.user_profile` or `Templates.friends_interests_list`.\n* `compress` (defaults to false): Whether to minify the javascript or not.\n* `clientVariable` (defaults to 'Templates'): Client side template\nvariable.\n* `hash` (defaults to true): Set to false if you don't want the md5 sum added to your urls.\n\n## AngularTemplatesAsset\n\nThe angular templates asset packages all .html templates ready to be injected into the client side angularjs template cache.\nYou can read more about angularjs [here](http://angularjs.org/).\n\n```javascript\nnew AngularTemplatesAsset({\n    url: '/js/templates.js',\n    directory: __dirname + '/templates'\n});\n```\n\nThen see the following example client js code which loads templates into the template cache, where `angularTemplates` is the function provided by AngularTemplatesAsset:\n\n```javascript\n//replace this with your module initialization logic\nvar myApp = angular.module(\"myApp\", []);\n\n//use this line to add the templates to the cache\nmyApp.run(['$templateCache', angularTemplates]);\n```\n\n### Options\n\n* `url`: The url that should retrieve this resource.\n* `hash` (defaults to true): Set to false if you don't want the md5 sum added to your urls.\n* `directory`: Directory where the .html templates are stored.\n* `compress` (defaults to false): Whether to unglify the js.\n\n## LessAsset\n\nThe less asset basically compiles up and serves your less files as css.  You\ncan read more about less [here](https://github.com/cloudhead/less.js).\n\n```javascript\nnew LessAsset({\n    url: '/style.css',\n    filename: __dirname + '/style/app.less'\n});\n```\n\n### Options\n\n* `url`: The url that should retrieve this resource.\n* `hash` (defaults to true): Set to false if you don't want the md5 sum added to your urls.\n* `filename`: Filename of the less file you want to serve.\n* `compress` (defaults to false): Whether to minify the css.\n* `paths`: List of paths to search for `@import` directives.\n\n\n# License\n\n©2012 Brad Carleton, Tech Pines and available under the [MIT license](http://www.opensource.org/licenses/mit-license.php):\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "_id": "asset-rack@1.1.7",
  "dist": {
    "shasum": "07ccd59184906dee63598c72df0f2d1445580498"
  },
  "_from": "asset-rack@*"
}
